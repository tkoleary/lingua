{"remainingRequest":"/Users/terrenceoleary/sites/GitHub/lingua/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/terrenceoleary/sites/GitHub/lingua/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/terrenceoleary/sites/GitHub/lingua/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/terrenceoleary/sites/GitHub/lingua/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/Users/terrenceoleary/sites/GitHub/lingua/docs/guide/readme.md?vue&type=template&id=74654ba6&","dependencies":[{"path":"/Users/terrenceoleary/sites/GitHub/lingua/docs/guide/readme.md","mtime":1599511254721},{"path":"/Users/terrenceoleary/sites/GitHub/lingua/node_modules/cache-loader/dist/cjs.js","mtime":1595622292152},{"path":"/Users/terrenceoleary/sites/GitHub/lingua/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1595622292699},{"path":"/Users/terrenceoleary/sites/GitHub/lingua/node_modules/cache-loader/dist/cjs.js","mtime":1595622292152},{"path":"/Users/terrenceoleary/sites/GitHub/lingua/node_modules/vue-loader/lib/index.js","mtime":1595622292699},{"path":"/Users/terrenceoleary/sites/GitHub/lingua/node_modules/@vuepress/markdown-loader/index.js","mtime":1595622292351}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}