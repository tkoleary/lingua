{"remainingRequest":"/Users/terrenceoleary/sites/GitHub/lingua/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/terrenceoleary/sites/GitHub/lingua/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/terrenceoleary/sites/GitHub/lingua/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/terrenceoleary/sites/GitHub/lingua/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/Users/terrenceoleary/sites/GitHub/lingua/docs/guide/languages/readme.md?vue&type=template&id=4e77a722&","dependencies":[{"path":"/Users/terrenceoleary/sites/GitHub/lingua/docs/guide/languages/readme.md","mtime":1595953869461},{"path":"/Users/terrenceoleary/sites/GitHub/lingua/node_modules/cache-loader/dist/cjs.js","mtime":1595953872925},{"path":"/Users/terrenceoleary/sites/GitHub/lingua/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1595953882541},{"path":"/Users/terrenceoleary/sites/GitHub/lingua/node_modules/cache-loader/dist/cjs.js","mtime":1595953872925},{"path":"/Users/terrenceoleary/sites/GitHub/lingua/node_modules/vue-loader/lib/index.js","mtime":1595953882540},{"path":"/Users/terrenceoleary/sites/GitHub/lingua/node_modules/@vuepress/markdown-loader/index.js","mtime":1595953872126}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}